prod_tibble.updated<-bind_rows(prod_tibble.updated,t)
t1<-bind_cols(tibble(date=i,names=unlist(ex[10:nrow(ex),1])),
as_tibble(data.matrix(ex[10:nrow(ex),3:4])))
names(t1)<-c("date","names","predicted","actual")
prod_per_windfarm<-bind_rows(prod_per_windfarm,
t1)
}
ss<-seq(as.Date("2017-08-02"),as.Date("2019-02-20"),1)
n<-"09-Produção Eólica"
for(j in 1:length(ss)){
i<-ss[j]
print(i)
day<-strftime(i, format = "%d")
month<-strftime(i,format = "%m")
year<-strftime(i,format="%Y")
outfile<-paste("excel_files/output",year,month,day,".xlsx",sep="")
if(!file.exists(outfile)){
link<-paste("http://www.ons.org.br/resultados_operacao/SDRO/Diario/",
year,"_",
month,"_",
day,
"/Html/DIARIO_",
day,
"-",
month,
"-",
year,
".xlsx",sep="")
print(link)
out<-getBinaryURL(link)
writeBin(out,outfile)
print(paste("Downloaded..",outfile))
}
if(j>104){
n<-"10-Produção Eólica"
}
#print(j)
ex<-read_excel(outfile,sheet=n)
####regional data
t<-bind_cols(tibble(date=i,region=c("N","NE","S","SE")),as_tibble(data.matrix(ex[3:6,2])))
names(t)<-c("date","region","val")
prod_tibble.updated<-bind_rows(prod_tibble.updated,t)
t1<-bind_cols(tibble(date=i,names=unlist(ex[10:nrow(ex),1])),
as_tibble(data.matrix(ex[10:nrow(ex),3:4])))
names(t1)<-c("date","names","predicted","actual")
prod_per_windfarm<-bind_rows(prod_per_windfarm,
t1)
}
ss<-seq(as.Date("2017-08-02"),as.Date(Sys.Date()-2),1)
#http://sdro.ons.org.br/SDRO/DIARIO/2017_08_29/HTML/10_ProducaoEolicaUsina_29-08-2017.xlsx
for(j in 1:length(ss)){
i<-ss[j]
print(i)
day<-strftime(i, format = "%d")
month<-strftime(i,format = "%m")
year<-strftime(i,format="%Y")
outfile<-paste("excel_files/output",year,month,day,".xlsx",sep="")
if(!file.exists(outfile)){
link<-paste("http://sdro.ons.org.br/SDRO/DIARIO/",
year,"_",
month,"_",
day,
"/Html/10_ProducaoEolicaUsina_",
day,
"-",
month,
"-",
year,
".xlsx",sep="")
out<-getBinaryURL(link)
print(link)
writeBin(out,outfile)
print(paste("Downloaded..",outfile))
}
#if(j>104){
#  n<-"10-Produção Eólica"
#}
#print(j)
ex<-read_excel(outfile,sheet=1)
####regional data
t<-bind_cols(tibble(date=i,region=c("N","NE","S","SE")),as_tibble(data.matrix(ex[3:6,2])))
names(t)<-c("date","region","val")
prod_tibble.updated<-bind_rows(prod_tibble.updated,t)
t1<-bind_cols(tibble(date=i,names=unlist(ex[10:nrow(ex),1])),
as_tibble(data.matrix(ex[10:nrow(ex),3:4])))
names(t1)<-c("date","names","predicted","actual")
prod_per_windfarm<-bind_rows(prod_per_windfarm,
t1)
}
theme_set(theme_classic(base_size = 5))
prod_tibble.updated %>% ggplot(aes(x=date,y=val)) + geom_line(aes(col=region),size=0.1) +
xlab("Day") + ylab("Production (GWh)")
prod_per_windfarm %>% ggplot(aes(x=predicted,y=actual)) + geom_point(aes(col=names),size=0.1)+ theme(legend.position="none")+
xlab("Actual Production (MWh)")+ylab("Predicted Production (MWh)")
prod_per_windfarm %>% ggplot(aes(x=date,y=actual)) + geom_line(aes(col=names),size=0.1)+ theme(legend.position="none")+
xlab("Actual Production (MWh)")+ylab("Predicted Production (MWh)")
prod_per_windfaram
prod_per_windfarm
View(prod_per_windfarm)
####predicted: predicted wind farm production (1 day ahead)
####actual: actual observed wind farm production
prod_per_windfarm %>% filter(names=="EOL MACAUBAS") %>% ggplot(aes(x=date,y=actual)) + geom_line(aes(col=names),size=0.1)+ theme(legend.position="none")+
xlab("Actual Production (MWh)")+ylab("Predicted Production (MWh)")
####predicted: predicted wind farm production (1 day ahead)
####actual: actual observed wind farm production
prod_per_windfarm %>% filter(names=="CONJUNTO EOLICO BROTAS DE MACAUBAS") %>% ggplot(aes(x=date,y=actual)) + geom_line(aes(col=names),size=0.1)+ theme(legend.position="none")+
xlab("Actual Production (MWh)")+ylab("Predicted Production (MWh)")
####predicted: predicted wind farm production (1 day ahead)
####actual: actual observed wind farm production
prod_per_windfarm %>% filter(names=="EOL PRA FORMOSA") %>% ggplot(aes(x=date,y=actual)) + geom_line(aes(col=names),size=0.1)+ theme(legend.position="none")+
xlab("Actual Production (MWh)")+ylab("Predicted Production (MWh)")
prod_per_windfarm %>% select(names) %>% unique()
prod_per_windfarm %>% select(names) %>% unique() %>% length()
prod_per_windfarm %>% select(names) %>% unique() %>% nrow()
BASE_DIR<-("G:/Meine Ablage/LVA/PhD Lectures/MachineLearningCourse")
setwd(BASE_DIR)
source("scripts/windturbines/functions.R")
SOURCE<-"Google"
RESOLUTION<-19
COUNTRY<-"AT"
FILTER_WINDTURBINES_KW<-1000
PATH_EXPERIMENT<-
paste0(SOURCE,
"/RESOLUTION",
RESOLUTION,
"/",
COUNTRY,
"/")
PATH_TURBINE_LOCATIONS<-paste0(
"data/turbineLocations",
"/",
COUNTRY,"/")
FILE_TURBINE_LOCATIONS<-paste0(
PATH_TURBINE_LOCATIONS,
"windturbineLocations.csv")
PATH_RAW_IMAGES_TURBINES<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"raw/Turbines/")
PATH_RAW_IMAGES_NOTURBINES<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"raw/NoTurbines/")
PATH_WINDPARK_LOCATIONS<-paste0(
"data/windParks",
"/",
COUNTRY,"/")
PATH_TEMP<-"data/temp/"
PATH_LOCAL_TEMP<-"c:/temp/"
FILE_QUALITY_CHECK<-paste0(
"qualityCheck/",
PATH_EXPERIMENT,
"qualityCheck.csv")
PATH_ML_IMAGES_TURBINES_TRAIN<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/train/Turbines/")
PATH_ML_IMAGES_TURBINES_VALIDATION<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/validation/Turbines/")
PATH_ML_IMAGES_TURBINES_TEST<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/test/Turbines/")
PATH_ML_IMAGES_NOTURBINES_TRAIN<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/train/NoTurbines/")
PATH_ML_IMAGES_NOTURBINES_VALIDATION<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/validation/NoTurbines/")
PATH_ML_IMAGES_NOTURBINES_TEST<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/test/NoTurbines/")
dir.create("config",showWarnings = FALSE)
params<-data.frame(SOURCE,
RESOLUTION,
COUNTRY,
PATH_EXPERIMENT)
paths<-data.frame(
PATH_TURBINE_LOCATIONS,
PATH_RAW_IMAGES_TURBINES,
PATH_RAW_IMAGES_NOTURBINES,
PATH_WINDPARK_LOCATIONS,
PATH_TEMP,
PATH_LOCAL_TEMP,
PATH_ML_IMAGES_TURBINES_TRAIN,
PATH_ML_IMAGES_TURBINES_VALIDATION,
PATH_ML_IMAGES_TURBINES_TEST,
PATH_ML_IMAGES_NOTURBINES_TRAIN,
PATH_ML_IMAGES_NOTURBINES_VALIDATION,
PATH_ML_IMAGES_NOTURBINES_TEST
)
sapply(unlist(paths),
function(x){
print(as.character(x))
dir.create(as.character(x),showWarnings=FALSE,recursive = TRUE)})
files<-data.frame(FILE_QUALITY_CHECK,
FILE_TURBINE_LOCATIONS)
####write config files
params<-data.frame(params,
paths,
files)
write_csv(params,"config/params.csv")
BASE_DIR<-("G:/Meine Ablage/LVA/PhD Lectures/MachineLearningCourse")
setwd(BASE_DIR)
source("scripts/windturbines/functions.R")
SOURCE<-"Google"
RESOLUTION<-19
COUNTRY<-"BR"
FILTER_WINDTURBINES_KW<-1000
PATH_EXPERIMENT<-
paste0(SOURCE,
"/RESOLUTION",
RESOLUTION,
"/",
COUNTRY,
"/")
PATH_TURBINE_LOCATIONS<-paste0(
"data/turbineLocations",
"/",
COUNTRY,"/")
FILE_TURBINE_LOCATIONS<-paste0(
PATH_TURBINE_LOCATIONS,
"windturbineLocations.csv")
PATH_RAW_IMAGES_TURBINES<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"raw/Turbines/")
PATH_RAW_IMAGES_NOTURBINES<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"raw/NoTurbines/")
PATH_WINDPARK_LOCATIONS<-paste0(
"data/windParks",
"/",
COUNTRY,"/")
PATH_TEMP<-"data/temp/"
PATH_LOCAL_TEMP<-"c:/temp/"
FILE_QUALITY_CHECK<-paste0(
"qualityCheck/",
PATH_EXPERIMENT,
"qualityCheck.csv")
PATH_ML_IMAGES_TURBINES_TRAIN<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/train/Turbines/")
PATH_ML_IMAGES_TURBINES_VALIDATION<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/validation/Turbines/")
PATH_ML_IMAGES_TURBINES_TEST<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/test/Turbines/")
PATH_ML_IMAGES_NOTURBINES_TRAIN<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/train/NoTurbines/")
PATH_ML_IMAGES_NOTURBINES_VALIDATION<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/validation/NoTurbines/")
PATH_ML_IMAGES_NOTURBINES_TEST<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/test/NoTurbines/")
dir.create("config",showWarnings = FALSE)
params<-data.frame(SOURCE,
RESOLUTION,
COUNTRY,
PATH_EXPERIMENT)
paths<-data.frame(
PATH_TURBINE_LOCATIONS,
PATH_RAW_IMAGES_TURBINES,
PATH_RAW_IMAGES_NOTURBINES,
PATH_WINDPARK_LOCATIONS,
PATH_TEMP,
PATH_LOCAL_TEMP,
PATH_ML_IMAGES_TURBINES_TRAIN,
PATH_ML_IMAGES_TURBINES_VALIDATION,
PATH_ML_IMAGES_TURBINES_TEST,
PATH_ML_IMAGES_NOTURBINES_TRAIN,
PATH_ML_IMAGES_NOTURBINES_VALIDATION,
PATH_ML_IMAGES_NOTURBINES_TEST
)
sapply(unlist(paths),
function(x){
print(as.character(x))
dir.create(as.character(x),showWarnings=FALSE,recursive = TRUE)})
files<-data.frame(FILE_QUALITY_CHECK,
FILE_TURBINE_LOCATIONS)
####write config files
params<-data.frame(params,
paths,
files)
write_csv(params,"config/params.csv")
################## This is a small tool to manually rate the quality of the downloaded fotos
input_dir<-PATH_RAW_IMAGES_TURBINES
files<-list.files(input_dir) %>% mixedsort()
n<-length(files)
quality_check<-NULL
if(file.exists(filename)){
quality_check<-read_csv(filename)
}else{
windTurbines<-read_csv(TURBINE_LOCATIONS_FILE)
quality_check<-windTurbines %>%
filter(KW>FILTER_WINDTURBINES_KW) %>%
mutate(id=1:n(),quality=rep(NA,n()))
}
BASE_DIR<-("G:/Meine Ablage/LVA/PhD Lectures/MachineLearningCourse")
setwd(BASE_DIR)
source("scripts/windturbines/functions.R")
input_dir<-PATH_RAW_IMAGES_TURBINES
files<-list.files(input_dir) %>% mixedsort()
n<-length(files)
quality_check<-NULL
if(file.exists(filename)){
quality_check<-read_csv(filename)
}else{
windTurbines<-read_csv(TURBINE_LOCATIONS_FILE)
quality_check<-windTurbines %>%
filter(KW>FILTER_WINDTURBINES_KW) %>%
mutate(id=1:n(),quality=rep(NA,n()))
}
library(gtools)
input_dir<-PATH_RAW_IMAGES_TURBINES
files<-list.files(input_dir) %>% mixedsort()
n<-length(files)
quality_check<-NULL
if(file.exists(filename)){
quality_check<-read_csv(filename)
}else{
windTurbines<-read_csv(TURBINE_LOCATIONS_FILE)
quality_check<-windTurbines %>%
filter(KW>FILTER_WINDTURBINES_KW) %>%
mutate(id=1:n(),quality=rep(NA,n()))
}
filename
filename<-FILE_QUALITY_CHECK
if(file.exists(filename)){
quality_check<-read_csv(filename)
}else{
windTurbines<-read_csv(TURBINE_LOCATIONS_FILE)
quality_check<-windTurbines %>%
filter(KW>FILTER_WINDTURBINES_KW) %>%
mutate(id=1:n(),quality=rep(NA,n()))
}
FILE_QUALITY_CHECK
BASE_DIR<-("G:/Meine Ablage/LVA/PhD Lectures/MachineLearningCourse")
setwd(BASE_DIR)
source("scripts/windturbines/functions.R")
SOURCE<-"Google"
RESOLUTION<-19
COUNTRY<-"BR"
FILTER_WINDTURBINES_KW<-1000
PATH_EXPERIMENT<-
paste0(SOURCE,
"/RESOLUTION",
RESOLUTION,
"/",
COUNTRY,
"/")
PATH_TURBINE_LOCATIONS<-paste0(
"data/turbineLocations",
"/",
COUNTRY,"/")
FILE_TURBINE_LOCATIONS<-paste0(
PATH_TURBINE_LOCATIONS,
"windturbineLocations.csv")
PATH_RAW_IMAGES_TURBINES<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"raw/Turbines/")
PATH_RAW_IMAGES_NOTURBINES<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"raw/NoTurbines/")
PATH_WINDPARK_LOCATIONS<-paste0(
"data/windParks",
"/",
COUNTRY,"/")
PATH_TEMP<-"data/temp/"
PATH_LOCAL_TEMP<-"c:/temp/"
FILE_QUALITY_CHECK<-paste0(
"qualityCheck/",
PATH_EXPERIMENT,
"qualityCheck.csv")
PATH_ML_IMAGES_TURBINES_TRAIN<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/train/Turbines/")
PATH_ML_IMAGES_TURBINES_VALIDATION<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/validation/Turbines/")
PATH_ML_IMAGES_TURBINES_TEST<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/test/Turbines/")
PATH_ML_IMAGES_NOTURBINES_TRAIN<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/train/NoTurbines/")
PATH_ML_IMAGES_NOTURBINES_VALIDATION<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/validation/NoTurbines/")
PATH_ML_IMAGES_NOTURBINES_TEST<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/test/NoTurbines/")
dir.create("config",showWarnings = FALSE)
params<-data.frame(SOURCE,
RESOLUTION,
COUNTRY,
PATH_EXPERIMENT)
paths<-data.frame(
PATH_TURBINE_LOCATIONS,
PATH_RAW_IMAGES_TURBINES,
PATH_RAW_IMAGES_NOTURBINES,
PATH_WINDPARK_LOCATIONS,
PATH_TEMP,
PATH_LOCAL_TEMP,
PATH_ML_IMAGES_TURBINES_TRAIN,
PATH_ML_IMAGES_TURBINES_VALIDATION,
PATH_ML_IMAGES_TURBINES_TEST,
PATH_ML_IMAGES_NOTURBINES_TRAIN,
PATH_ML_IMAGES_NOTURBINES_VALIDATION,
PATH_ML_IMAGES_NOTURBINES_TEST
)
sapply(unlist(paths),
function(x){
print(as.character(x))
dir.create(as.character(x),showWarnings=FALSE,recursive = TRUE)})
files<-data.frame(FILE_QUALITY_CHECK,
FILE_TURBINE_LOCATIONS)
####write config files
params<-data.frame(params,
paths,
files)
write_csv(params,"config/params.csv")
if(file.exists(filename)){
quality_check<-read_csv(filename)
}else{
windTurbines<-read_csv(TURBINE_LOCATIONS_FILE)
quality_check<-windTurbines %>%
filter(KW>FILTER_WINDTURBINES_KW) %>%
mutate(id=1:n(),quality=rep(NA,n()))
}
TURBINE_LOCATIONS_FILE
filename<-FILE_QUALITY_CHECK
if(file.exists(filename)){
quality_check<-read_csv(filename)
}else{
windTurbines<-read_csv(FILE_TURBINE_LOCATIONS)
quality_check<-windTurbines %>%
filter(KW>FILTER_WINDTURBINES_KW) %>%
mutate(id=1:n(),quality=rep(NA,n()))
}
quality_check
################## This is a small tool to manually rate the quality of the downloaded fotos
library(gtools)
input_dir<-PATH_RAW_IMAGES_TURBINES
files<-list.files(input_dir) %>% mixedsort()
n<-length(files)
quality_check<-NULL
filename<-FILE_QUALITY_CHECK
if(file.exists(filename)){
quality_check<-read_csv(filename)
}else{
windTurbines<-read_csv(FILE_TURBINE_LOCATIONS)
quality_check<-windTurbines %>%
filter(KW>FILTER_WINDTURBINES_KW) %>%
mutate(id=1:n(),quality=rep(100,n()))
}
for(i in 1:n){
print(files[i])
f<-files[i]
f_nmb<-as.numeric(str_sub(f,1,-5))
f1<-paste0(input_dir,f)
r<-brick(f1)
plotRGB(r)
print(paste0("current rating is ",quality_check[f_nmb,]$quality))
print("your rating of quality?")
print("options: 1-100. -1 indicates that turbine is currently being built")
print("q exits, n maintains current rating")
q<-readline()
if(q=="q"){
break
}
if(q=="n"){
next
}
q<-as.numeric(q)
quality_check[f_nmb,]$quality<-q
quality_check[f_nmb,]$id<-f_nmb
}
write_csv(quality_check,filename)
PATH_QUALITYCHECK<-paste0(
"qualityCheck/",
PATH_EXPERIMENT)
params<-data.frame(SOURCE,
RESOLUTION,
COUNTRY,
PATH_EXPERIMENT)
paths<-data.frame(
PATH_TURBINE_LOCATIONS,
PATH_RAW_IMAGES_TURBINES,
PATH_RAW_IMAGES_NOTURBINES,
PATH_WINDPARK_LOCATIONS,
PATH_TEMP,
PATH_LOCAL_TEMP,
PATH_ML_IMAGES_TURBINES_TRAIN,
PATH_ML_IMAGES_TURBINES_VALIDATION,
PATH_ML_IMAGES_TURBINES_TEST,
PATH_ML_IMAGES_NOTURBINES_TRAIN,
PATH_ML_IMAGES_NOTURBINES_VALIDATION,
PATH_ML_IMAGES_NOTURBINES_TEST,
PATH_QUALITYCHECK
)
sapply(unlist(paths),
function(x){
print(as.character(x))
dir.create(as.character(x),showWarnings=FALSE,recursive = TRUE)})
files<-data.frame(FILE_QUALITY_CHECK,
FILE_TURBINE_LOCATIONS)
####write config files
params<-data.frame(params,
paths,
files)
write_csv(params,"config/params.csv")
write_csv(quality_check,filename)
